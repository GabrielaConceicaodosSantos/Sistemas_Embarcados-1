/*
 * Botao.cpp
 *
 *  Created on: Nov 27, 2017
 *      Author: pi
 */

#include "Botao.h"

void GPIO_Setup(int num) {
	//Funcao que recebe o numero da GPIO a ser criada como entrada
	//e retorna o descritor de arquivo do arquivo value da GPIO criada.
	int fd;
	char str[50];
	fd = open("/sys/class/gpio/export", O_WRONLY);
	if (fd == -1) {
		cout << "Erro ao abrir /sys/class/gpio/export" << endl;
	} else {
		sprintf(str, "%d", num);
		if (write(fd, str, 1) != 1) {
			cout << "Erro: Nao foi possivel criar a GPIO " << num << endl;
		} else {
			close(fd); //fechar o arquivo export
			sprintf(str, "/sys/class/gpio/gpio%d/direction", num);
			int gpio_direction;
			gpio_direction = open(str, O_WRONLY);
			if (gpio_direction == -1) {
				cout << "Erro ao abrir o arquivo " << str << endl;
			} else {
				if (write(gpio_direction, "in", 2) != 2) {
					cout << "Erro ao definir direcao para GPIO " << num << endl;
				} else {
					close(gpio_direction);
					cout << "GPIO " << num << "Configurada como entrada."
							<< endl;
				}

			}
		}
	}
}

void *Verifica_Navegar(void *d) {
	struct Decisao *decisao;
	decisao = (struct Decisao*) d;
	while (1) {
		while (GPIO_get(decisao->GPIO[0]))
			;
		usleep(150000);
		decisao->navegar = 0;
		while (GPIO_get(decisao->GPIO[0]) == 0)
			;
		usleep(150000);
		decisao->navegar = 1;
	}
	return NULL;

}

void *Verifica_Selecao(void *d) {
	struct Decisao *decisao;
	decisao = (struct Decisao*) d;
	while (1) {
		while (GPIO_get(decisao->GPIO[1]))
			;
		usleep(150000);
		decisao->selecionar = 0;
		while (GPIO_get(decisao->GPIO[1]) == 0)
			;
		usleep(150000);
		decisao->selecionar = 1;
	}
	return NULL;

}

void *Verifica_Voltar(void *d) {
	struct Decisao *decisao;
	decisao = (struct Decisao*) d;
	while (1) {
		while (GPIO_get(decisao->GPIO[2]))
			;
		usleep(150000);
		decisao->voltar = 0;
		while (GPIO_get(decisao->GPIO[2]) == 0)
			;
		usleep(150000);
		decisao->voltar = 1;
	}
	return NULL;

}

int GPIO_get(int GPIO_num) {
	int fd, iValue;
	char caminho_gpio[50], cValue[1];
	sprintf(caminho_gpio, "/sys/class/gpio/gpio%d/value", GPIO_num);
	fd = open(caminho_gpio, O_RDONLY);
	read(fd, cValue, 1);
	close(fd);
	iValue = atoi(cValue);
	//cout << iValue << endl;
	return iValue;

}

void Configurar_Botoes(Decisao *decisao){
	GPIO_Setup(decisao->GPIO[0]);
	GPIO_Setup(decisao->GPIO[1]);
	GPIO_Setup(decisao->GPIO[2]);
	pthread_t thread_id[3];
	pthread_create(&thread_id[0], NULL, &Verifica_Navegar, decisao);
	pthread_create(&thread_id[1], NULL, &Verifica_Selecao, decisao);
	pthread_create(&thread_id[2], NULL, &Verifica_Voltar, decisao);
}
